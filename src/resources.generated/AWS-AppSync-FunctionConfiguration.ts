import { Resource as $Resource } from "../template/Resource.js";
import { ResourceOptions as $ResourceOptions } from "../template.js";
/**
 * Resource type definition for `AWS::AppSync::FunctionConfiguration`.
 * An example resource schema demonstrating some basic constructs and validation rules.
 * @see {@link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html}
 */
export type AppSyncFunctionConfigurationProperties = {
  /**
   * The AWS AppSync GraphQL API that you want to attach using this function.
   */
  ApiId: string;
  /**
   * The resolver code that contains the request and response functions. When code is used, the runtime is required. The runtime value must be APPSYNC_JS.
   */
  Code?: string;
  /**
   * The Amazon S3 endpoint (where the code is located??).
   */
  CodeS3Location?: string;
  /**
   * The name of data source this function will attach.
   */
  DataSourceName: string;
  /**
   * The function description.
   */
  Description?: string;
  /**
   * The version of the request mapping template. Currently, only the 2018-05-29 version of the template is supported.
   */
  FunctionVersion?: string;
  /**
   * The maximum number of resolver request inputs that will be sent to a single AWS Lambda function in a BatchInvoke operation.
   */
  MaxBatchSize?: number;
  /**
   * The name of the function.
   */
  Name: string;
  /**
   * The Function request mapping template. Functions support only the 2018-05-29 version of the request mapping template.
   */
  RequestMappingTemplate?: string;
  /**
   * Describes a Sync configuration for a resolver. Contains information on which Conflict Detection, as well as Resolution strategy, should be performed when the resolver is invoked.
   */
  RequestMappingTemplateS3Location?: string;
  /**
   * The Function response mapping template.
   */
  ResponseMappingTemplate?: string;
  /**
   * The location of a response mapping template in an Amazon S3 bucket. Use this if you want to provision with a template file in Amazon S3 rather than embedding it in your CloudFormation template.
   */
  ResponseMappingTemplateS3Location?: string;
  /**
   * Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
   */
  Runtime?: AppSyncRuntime;
  /**
   * Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
   */
  SyncConfig?: SyncConfig;
};
/**
 * Attribute type definition for `AWS::AppSync::FunctionConfiguration`.
 * @see {@link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html#aws-resource-appsync-functionconfiguration-return-values}
 */
export type AppSyncFunctionConfigurationAttributes = {
  /**
   * The ARN for the function generated by the service
   */
  FunctionArn: string;
  /**
   * The unique identifier for the function generated by the service
   */
  FunctionId: string;
};
/**
 * Type definition for `AWS::AppSync::FunctionConfiguration.AppSyncRuntime`.
 * Describes a runtime used by an AWS AppSync pipeline resolver or AWS AppSync function. Specifies the name and version of the runtime to use. Note that if a runtime is specified, code must also be specified.
 * @see {@link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-functionconfiguration-appsyncruntime.html}
 */
export type AppSyncRuntime = {
  /**
   * The name of the runtime to use. Currently, the only allowed value is APPSYNC_JS.
   */
  Name: string;
  /**
   * The version of the runtime to use. Currently, the only allowed version is 1.0.0.
   */
  RuntimeVersion: string;
};
/**
 * Type definition for `AWS::AppSync::FunctionConfiguration.LambdaConflictHandlerConfig`.
 * The LambdaConflictHandlerConfig when configuring LAMBDA as the Conflict Handler.
 * @see {@link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-functionconfiguration-lambdaconflicthandlerconfig.html}
 */
export type LambdaConflictHandlerConfig = {
  /**
   * The Amazon Resource Name (ARN) for the Lambda function to use as the Conflict Handler.
   */
  LambdaConflictHandlerArn?: string;
};
/**
 * Type definition for `AWS::AppSync::FunctionConfiguration.SyncConfig`.
 * Describes a Sync configuration for a resolver. Specifies which Conflict Detection strategy and Resolution strategy to use when the resolver is invoked.
 * @see {@link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-appsync-functionconfiguration-syncconfig.html}
 */
export type SyncConfig = {
  /**
   * The Conflict Detection strategy to use.
   */
  ConflictDetection: string;
  /**
   * The Conflict Resolution strategy to perform in the event of a conflict.
   */
  ConflictHandler?: string;
  /**
   * The LambdaConflictHandlerConfig when configuring LAMBDA as the Conflict Handler.
   */
  LambdaConflictHandlerConfig?: LambdaConflictHandlerConfig;
};
/**
 * Resource type definition for `AWS::AppSync::FunctionConfiguration`.
 * An example resource schema demonstrating some basic constructs and validation rules.
 * @see {@link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-appsync-functionconfiguration.html}
 */
export class AppSyncFunctionConfiguration extends $Resource<
  "AWS::AppSync::FunctionConfiguration",
  AppSyncFunctionConfigurationProperties,
  AppSyncFunctionConfigurationAttributes
> {
  public static readonly Type = "AWS::AppSync::FunctionConfiguration";
  public static readonly AttributeNames = [
    "FunctionArn" as const,
    "FunctionId" as const,
  ];
  constructor(
    logicalId: string,
    properties: AppSyncFunctionConfigurationProperties,
    options?: $ResourceOptions,
  ) {
    super(
      logicalId,
      AppSyncFunctionConfiguration.Type,
      properties,
      AppSyncFunctionConfiguration.AttributeNames,
      options,
    );
  }
}
