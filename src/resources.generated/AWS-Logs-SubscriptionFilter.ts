import { Resource as $Resource } from "../template/Resource.js";
import { ResourceOptions as $ResourceOptions } from "../template.js";
/**
 * Resource type definition for `AWS::Logs::SubscriptionFilter`.
 * Subscription filters allow you to subscribe to a real-time stream of log events and have them delivered to a specific destination.
 * @see {@link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html}
 */
export type LogsSubscriptionFilterProperties = {
  /**
   * The Amazon Resource Name (ARN) of the destination.
   */
  DestinationArn: string;
  /**
   * The method used to distribute log data to the destination. By default, log data is grouped by log stream, but the grouping can be set to random for a more even distribution. This property is only applicable when the destination is an Amazon Kinesis stream.
   */
  Distribution?: "Random" | "ByLogStream";
  /**
   * The name of the filter generated by resource.
   */
  FilterName?: string;
  /**
   * The filtering expressions that restrict what gets delivered to the destination AWS resource.
   */
  FilterPattern: string;
  /**
   * Existing log group that you want to associate with this filter.
   */
  LogGroupName: string;
  /**
   * The ARN of an IAM role that grants CloudWatch Logs permissions to deliver ingested log events to the destination stream. You don't need to provide the ARN when you are working with a logical destination for cross-account delivery.
   */
  RoleArn?: string;
};
/**
 * Resource type definition for `AWS::Logs::SubscriptionFilter`.
 * Subscription filters allow you to subscribe to a real-time stream of log events and have them delivered to a specific destination.
 * @see {@link https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-logs-subscriptionfilter.html}
 */
export class LogsSubscriptionFilter extends $Resource<
  "AWS::Logs::SubscriptionFilter",
  LogsSubscriptionFilterProperties,
  Record<string, never>
> {
  public static readonly Type = "AWS::Logs::SubscriptionFilter";
  public static readonly AttributeNames = [];
  constructor(
    logicalId: string,
    properties: LogsSubscriptionFilterProperties,
    options?: $ResourceOptions,
  ) {
    super(
      logicalId,
      LogsSubscriptionFilter.Type,
      properties,
      LogsSubscriptionFilter.AttributeNames,
      options,
    );
  }
}
